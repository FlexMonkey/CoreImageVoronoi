// Colorful Voronoi
// By: Brandon Fogerty
// bfogerty at gmail dot com
// xdpixel.com
// Based on http://glslsandbox.com/e#31908.0

#ifdef GL_ES
precision mediump float;
#endif

// uniform vec2 resolution;

vec2 hash(vec2 p, float time)
{
    mat2 m = mat2(  13.85, 07.77,
                    99.41, 88.48
                );

    return fract(sin(m*p) / sqrt(m*p) * (m*p*(time*0.0025)));
}

float voronoi(vec2 p, float time)
{
    vec2 g = floor(p);
    vec2 f = fract(p);

    float distanceToClosestFeaturePoint = 1.0;
    for(int y = -1; y <= 1; y++)
    {
        for(int x = -1; x <= 1; x++)
        {
            vec2 latticePoint = vec2(x, y);
            float currentDistance = distance(latticePoint + hash(g+latticePoint, time), f);
            distanceToClosestFeaturePoint = min(distanceToClosestFeaturePoint, currentDistance);
        }
    }

    return distanceToClosestFeaturePoint;
}

kernel vec4 colorKernel(float time)
{
    vec2 uv = destCoord() / 100.0;

    float r = smoothstep(0.0, 0.7, voronoi( uv, time) * 0.5);

    vec3 finalColor = vec3(r);
    
    return vec4(finalColor, 1.0 );
}